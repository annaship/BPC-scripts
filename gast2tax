#!/usr/bin/env perl

#########################################
#
# gast2tax: assign taxonomic strings to read_ids in the gast tables
#
# Author: Susan Huse, shuse@mbl.edu
#
# Date: Sat Oct 20 18:00:50 EDT 2007
#
# Copyright (C) 2008 Marine Biological Laboratory, Woods Hole, MA
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# For a copy of the GNU General Public License, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
# or visit http://www.gnu.org/copyleft/gpl.html
#
# Keywords: taxonomy RefSSU GAST
# 
# Assumptions: 
#
# Revisions:  Removed the boot levels, defaulting to 80, but reftable now uses other
#             sources, too.  We can put the boot scores back in later.  
#
# Programming Notes:
#
########################################
use strict;
use warnings;
use Conjbpcdb;
use Taxonomy;
use Cwd;
require 'pipeline_subs.pl'; #subroutines

#######################################
# ----- Table of Content -----
# Set up usage statement
# Definition statements
# Test for commandline arguments
# Parse commandline arguments, ARGV
# Set up the directory and fasta filenames
# --- Create reference table name if not provided
# --- If source is 3'-5' (e.g., v6v4) than need to flip for reference table name
# Create tagtax and tax_assignment tables
# --- Create tagtax table
# --- Create tax_assignment table
# Load up the gast references and the ref database
# --- Load up the data in the gast_run_source table
# --- load up the reference database
# Loop through the samples and assign taxonomy
# --- Step through each read_id
# --- Parse the names information
# --- Create an array of taxonomy objects for all the associated refssu_ids.
# --- Lookup the consensus taxonomy for the array
# --- Need to fix this issue in the Taxonomy module, rather than here.
# --- don't trust below domain if too far from the hit
# --- store the read in the load file
# --- No real blast hit
# Close the file and import to the database
# --- use mysqlimport to load up the data into the tables
# Subroutines:
# --- Create temp file name
#######################################

#######################################
#
# Set up usage statement
#
#######################################
my $scriptHelp = "
 gast2tax - assign taxonomy to read_ids in a gast table
\n";

my $usage = "
   Usage:  gast2tax -g gast_table -reg hypervariableregion -ref ref_table -o outTaxTable -m majority
      ex:  gast2tax -g gast_20070919 -o tagtax -reg v6
           gast2tax -g gast_20070919 -ref refv6_gen2chip
           
           gast2tax -g gast_20110728_v6v4 -o tagtax -reg v6v4
           NB: will use refhvr_v4v6 for v6v4
#          TODO:  ask Sue about gast_20110728_v6v4 vs. gast_20070919

 Options:  
           -reg  hypervariable region of the tags [no default set]
           -g    name of the gast table containing refhvr_vX assignments for each sample
           -ref  alternative table with taxonomy references [e.g. refhvr_v6, refhvr_v9, refv6_gen2chip]
           -n    names file [default run_reg.names]
           -m    percent required for a majority consensus [default: 66]
           -o    output taxonomy table [default: tagtax]
           -tf   alternative field name for reference taxonomy values [default: taxonomy]
           -tax_assignment     tax_assignment table name [default: tax_assignment]
           -taxonomy  taxonomy table name [default: taxonomy]
           -tmp_dir tmp dir [defaul: /usr/local/tmp/]
\n";

#######################################
#
# Definition statements
#
#######################################
my $db_host         = "bpcdb1";
my $db_name         = "env454";
my $dbh             = &db_connect($db_host, $db_name);
my $tmp_dir         = "/usr/local/tmp/";
my $gast_table;
my $majority        = 66;
my $vRegion         = '';
# my $tagtax_table    = "tagtax_temp";
my $tagtax_table    = "tagtax";
my $tax_assignment_table = "tax_assignment";
my $taxonomy_table  = "taxonomy";
my $ref_table       = '';
my $noBlast         = "Unknown";
my $noConsensus     = "Unknown";
my $noRefTax        = "Unknown";
my $tax_field       = "taxonomy";
my $refssu_id_field = 'refssu_id';
my $refhvr_id_field = 'refhvr_id';
my $distance_field  = "distance";
my $read_id_field   = "read_id";
my $nodes           = 400;
my $limit           = "";
my $first_row       = 1;
my $num_rows        = -1;  #if not reset, do all lines
my $log_filename    = "gast2tax.log";
my $tagtax_tmp_filename;
my $tax_assignment_tmp_filename;
#my $print_to_file            = 0;
my $selectDistinct;
#my $index          = '';
my $replace         = "";
my $taxonomy_id     = "";
my $rank_id         = ""; 
my $minrank_id      = "";


# if gast distance >= $max_distance then assign to domain only.  Too far to trust
my $max_distance    = 0.30;
my %max_distance_for;
$max_distance_for{'v6'}   = 0.30;
$max_distance_for{'v6a'}  = 0.30;
$max_distance_for{'v6v4'} = 0.25;
$max_distance_for{'v3v5'} = 0.25;

#######################################
#
# Test for commandline arguments
#
#######################################
open (LOG, ">>$log_filename") or warn "Unable to open log file: $log_filename.\nContinuing without logging\n";
print LOG `date`;
my $gast2tax_cmd = join(" ", $0, @ARGV);
print LOG "$gast2tax_cmd\n";  #print out the command

if (! $ARGV[0] ) 
{
	print $scriptHelp;
	print $usage;
	exit -1;
} 

while ((scalar @ARGV > 0) && ($ARGV[0] =~ /^-/))
{
	if ($ARGV[0] =~ /-h/) {
		print $scriptHelp;
		print $usage;
		exit 0;
	} elsif ($ARGV[0] eq "-g") {
		shift @ARGV;
		$gast_table = shift @ARGV;
	} elsif ($ARGV[0] eq "-m") {
		shift @ARGV;
		$majority = shift @ARGV;
	} elsif ($ARGV[0] eq "-n") {
		shift @ARGV;
		$nodes = shift @ARGV;
	} elsif ($ARGV[0] eq "-ref") {
		shift @ARGV;
		$ref_table = shift @ARGV;
	} elsif ($ARGV[0] eq "-reg") {
		shift @ARGV;
		$vRegion = shift @ARGV;
	} elsif ($ARGV[0] eq "-tf") {
		shift @ARGV;
		$tax_field = shift @ARGV;
	} elsif ($ARGV[0] eq "-refssu_id") {
		shift @ARGV;
		$refssu_id_field = shift @ARGV;
	} elsif ($ARGV[0] eq "-taxonomy") {
		shift @ARGV;
		$taxonomy_table = shift @ARGV;
	} elsif ($ARGV[0] eq "-o") {
		shift @ARGV;
		$tagtax_table = shift @ARGV;
	} elsif ($ARGV[0] eq "-tax_assignment") {
		shift @ARGV;
		$tax_assignment_table = shift @ARGV;
	} elsif ($ARGV[0] eq "-tmp_dir") {
		shift @ARGV;
		$tmp_dir = shift @ARGV;
    $tmp_dir = $tmp_dir . "/";
	} elsif ($ARGV[0] eq "-replace") {
        shift @ARGV;
		$replace = "-r";
	} elsif ($ARGV[0] =~ /^-/) { #unknown parameter, just get rid of it
		print "Unknown commandline flag \"$ARGV[0]\".";
		print $usage;
		exit -1;
	}
}

#######################################
#
# Parse commandline arguments, ARGV
#
#######################################

#if ( (! $gast_table) || (! $vRegion) || (! $ref_table) )
if ( (! $gast_table) || (! $vRegion) )
{
	print "Incorrect number of arguments.  Please specify gast table and variable region\n";
	print "$usage\n";
	exit;
} 

#if (! exists $max_distance_for{$vRegion} )
#{
#    print "gast2tax does not have a max distance coded for hvr $vRegion.  Please add one to the code.\n";
#    exit;
#}

# Use default if nothing special
if (exists $max_distance_for{$vRegion} )
{
    $max_distance = $max_distance_for{$vRegion};
}

#######################################
#
# Set up the directory and fasta filenames
#
#######################################
$tagtax_tmp_filename         = &create_temp_file_name($tagtax_table);
print LOG "Tagtax temp file: $tagtax_tmp_filename\n";

$tax_assignment_tmp_filename = &create_temp_file_name($tax_assignment_table);
print LOG "Tax_assignment temp file: $tax_assignment_tmp_filename\n";

my $gastDir     = $gast_table;
$gastDir        =~ s/gast_//;
my $current_dir = getcwd;

if ($current_dir !~ /\/$gastDir$/)
{
    if (! -d $gastDir)
    {
        print LOG "Unable to locate the gast directory $gastDir\nExiting\n";
        print "Unable to locate the gast directory $gastDir\nExiting\n";
        exit 2;
    } else {
        # Enter the gast directory
        chdir $gastDir;
    }
}

my $names_file = $gastDir . ".names";
if (! -f $names_file) 
{
    print LOG "Unable to locate names file: $names_file.\nExiting\n";
    print "Unable to locate names file: $names_file.\nExiting\n";
    exit 2;
}

# # Create reference table name if not provided
# print "RRR1-g2t: ref_table = $ref_table\n";
# print LOG "RRR1-g2t: ref_table = $ref_table\n";
# my $part_c = "";
# if (! $ref_table) 
# {
#   # If source is 3'-5' (e.g., v6v4) than need to flip for reference table name
#   my $vRegion53 = $vRegion;
#   print "RRR2-g2t: vRegion = $vRegion; vRegion53 = $vRegion53\n";
#   print LOG "RRR2-g2t: vRegion = $vRegion; vRegion53 = $vRegion53\n";
#   if ($vRegion =~ /v([0-9])v([0-9])(.*)/)
#   {
#     my $region_a = $1;
#     my $region_b = $2;
#     $part_c = $3;
#     print "RRR3-g2t: region_a = $region_a; region_b = $region_b; part_c = $part_c\n";
#     print LOG "RRR3-g2t: region_a = $region_a; region_b = $region_b; part_c = $part_c\n";
#     if ($region_b < $region_a)
#     {
#       $vRegion53 = "v" . $region_b . "v" . $region_a . $part_c;
#       print "RRR4-g2t: vRegion53 = $vRegion53\n";
#       print LOG "RRR4-g2t: vRegion53 = $vRegion53\n";
#     }
#   }
#   $ref_table = "refhvr_" . $vRegion53; 
#   print "RRR5-g2t: ref_table = $ref_table\n";
#   print LOG "RRR5-g2t: ref_table = $ref_table\n";
# }
# print "RRR6-g2t: ref_table = $ref_table\n";
# print LOG"RRR6-g2t: ref_table = $ref_table\n";

if (! $ref_table) 
{
    # need to correct for v6v4 which uses table v4v6
    # If source is 3'-5' (e.g., v6v4) than need to flip for reference table name

    my $vRegion53 = $vRegion;
    if ($vRegion =~ /v[0-9]v[0-9]/i)
    {
        my $region_a = $vRegion;
        my $region_b = $vRegion;
        $region_a =~ s/v([0-9])v([0-9])/$1/i;
        $region_b =~ s/v([0-9])v([0-9])/$2/i;
        if ($region_b < $region_a)
        {
            $vRegion53 = "v" . $region_b . "v" . $region_a;
        }
    }
    
    $ref_table = "refhvr_" . $vRegion53; 
}

if (! $ref_table)
{
  $ref_table = "refssu"
}


#######################################
#
# Create tagtax and tax_assignment tables
#
#######################################

# ---- Create tagtax table -----
my $tagtax_table_id_name = $tagtax_table . "_id";
&prep_exec_query($dbh, "
  CREATE TABLE IF NOT EXISTS $tagtax_table (
    $tagtax_table_id_name int(10) unsigned NOT NULL PRIMARY KEY AUTO_INCREMENT,
    `read_id` char(15) NOT NULL DEFAULT '',
    `taxonomy_id` mediumint(8) unsigned NOT NULL DEFAULT '0',
    `rank_id` tinyint(1) unsigned NOT NULL,
    UNIQUE KEY `read_id` (`read_id`),
    FOREIGN KEY (`taxonomy_id`) REFERENCES $taxonomy_table (`taxonomy_id`),
    FOREIGN KEY (`rank_id`) REFERENCES `rank` (`rank_id`)
  );"
);

# ---- Create tax_assignment table -----
my $tax_assignment_table_id_name = $tax_assignment_table . "_id";
&prep_exec_query($dbh, "
  CREATE TABLE IF NOT EXISTS $tax_assignment_table (
    $tax_assignment_table_id_name INT(10) UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
    `read_id` CHAR(15) NOT NULL DEFAULT '',
    `refssu_count` SMALLINT(5) UNSIGNED NOT NULL DEFAULT 0,
    `vote` TINYINT(3) UNSIGNED NOT NULL DEFAULT 0,
    `minrank_id` TINYINT(1) UNSIGNED NOT NULL DEFAULT 0,
    `taxa_counts` VARCHAR(32) NOT NULL DEFAULT '',
    `max_pcts` VARCHAR(35) NOT NULL DEFAULT '',
    `na_pcts` VARCHAR(35) NOT NULL DEFAULT '',
    UNIQUE KEY `read_id` (`read_id`),
    FOREIGN KEY (`minrank_id`) REFERENCES `rank` (`rank_id`)
  );"
);

#######################################
#
# Load up the gast references and the ref database
#
#######################################

my %distances;
my %ref_hits;
my %refhvr_taxa;

# 
# Load up the data in the gast_run_source table
#
warn "Loading GAST hits from $gast_table ...\n";
my $selectGast = "SELECT $read_id_field, $refhvr_id_field, $distance_field FROM $gast_table";

print LOG "$selectGast\n";
my $selectGast_h = $dbh->prepare($selectGast) or die "Unable to prepare statement: $selectGast. Error: " . $dbh->errstr . "\n";
$selectGast_h->execute() || die "Unable to execute SQL statement. ($selectGast)  Error: " . $selectGast_h->errstr . "\n";
while(my ($id, $refhvr_id, $distance) = $selectGast_h->fetchrow()) 
{
    $distances{$id} = $distance; 
    if (! exists $ref_hits{$id} ) 
    {
        $ref_hits{$id} = [ $refhvr_id ]; 
    } else {
        push ( @{ $ref_hits{$id} }, $refhvr_id );
    }
}

#
# load up the reference database
#
warn "Loading reference data from $ref_table ...\n";
my $selectRefs = "";
if ($ref_table eq "refssu")
{
  $selectRefs = "SELECT accession_id, $tax_field FROM $ref_table join $taxonomy_table using(taxonomy_id)";
  print LOG "2) ref_table = $ref_table; selectRefs = $selectRefs\n";
  print "2) ref_table = $ref_table; selectRefs = $selectRefs\n";
}
elsif ($ref_table eq "refssu_119_ok")
{
  $selectRefs = "SELECT refssu_name, taxonomy
       FROM refssu_119_ok
       JOIN refssu_name_119 USING(refssu_name_id)
       JOIN refssu_119_taxonomy_source ON(refssu_taxonomy_source_id = refssu_119_taxonomy_source_id)
       JOIN taxonomy_119 ON (taxonomy_id = clean_taxonomy_id)
       WHERE deleted=0
  ";
  print LOG "3) ref_table = $ref_table; selectRefs = $selectRefs\n";
  print "3) ref_table = $ref_table; selectRefs = $selectRefs\n";
}
else
{
  $selectRefs = "SELECT $refhvr_id_field, $tax_field FROM $ref_table join $taxonomy_table using(taxonomy_id)";
  print LOG "1) selectRefs = $selectRefs\n";
  print "1) selectRefs = $selectRefs\n";
}

my $selectRefs_h = $dbh->prepare($selectRefs) or die "Unable to prepare statement: $selectRefs. Error: " . $dbh->errstr . "\n";
$selectRefs_h->execute() || die "Unable to execute SQL statement. ($selectRefs)  Error: " . $selectRefs_h->errstr . "\n";
while(my ($refhvr_id, $tax) = $selectRefs_h->fetchrow()) 
{
    if (! exists $refhvr_taxa{$refhvr_id} ) 
    {
        $refhvr_taxa{$refhvr_id} = [ $tax ]; 
    } else {
        push ( @{ $refhvr_taxa{$refhvr_id} }, $tax );
    }
}
#######################################
#
# Prepare queries
#
#######################################

my $taxonomy_id_h = &prep_query($dbh, "SELECT taxonomy_id FROM $taxonomy_table WHERE taxonomy=?");
print LOG "\$taxonomy_id_h = \"SELECT taxonomy_id FROM $taxonomy_table WHERE taxonomy=?\"\n";
my $rank_id_h     = &prep_query($dbh, "SELECT rank_id FROM rank WHERE rank=?");
print LOG  "\$rank_id_h = SELECT rank_id FROM rank WHERE rank=?\n";
my $minrank_id_h  = &prep_query($dbh, "SELECT rank_id FROM rank WHERE rank=?");
print LOG  "\$minrank_id_h = SELECT rank_id FROM rank WHERE rank=?\n";

#######################################
#
# Loop through the samples and assign taxonomy
#
#######################################
# Step through each read_id

#my $line_number = 0;
warn "Assigning taxonomy to reads...\n";
open(NAMES, "<$names_file") || die ("Unable to open names file: $names_file.  Exiting\n");
open(TAGTAX_OUT, ">$tagtax_tmp_filename") || die "Unable to write to output file $tagtax_tmp_filename.\n";
open(TAX_ASSIGNMENT_OUT, ">$tax_assignment_tmp_filename") || die "Unable to write to output file $tax_assignment_tmp_filename.\n";

while (my $line = <NAMES>)
{
  # Parse the names information
  chomp $line;
  my @data = split(/\t/, $line);
  my @reads = split(/,/, $data[1]);
  my $id = $data[0];

  my @taxObjects;
  my $distance;

  # Create an array of taxonomy objects for all the associated refssu_ids.
  # print LOG "EEE1: \$id = $id; ".'$ref_hits{$id} = '."$ref_hits{$id}, ".'$ref_hits{$id}[0] = '."$ref_hits{$id}[0]\n";
  if ( (exists $ref_hits{$id}) && ($ref_hits{$id}[0] ne 0) ) # 0 is a non-hit
  {
    foreach my $ref (@ { $ref_hits{$id} } )
    {
      # print LOG "EEE2: id = $id; ref = $ref\n";
      foreach my $tax (@ {$refhvr_taxa{$ref} } )
      {
        # print LOG  "EEE3: tax = $tax\n";
  	    push (@taxObjects, Taxonomy->new($tax));
      }
    }

    # Lookup the consensus taxonomy for the array
    my @taxReturn = Taxonomy->consensus(@taxObjects, $majority);
    # taxReturn: 0=taxObj, 1=winning vote, 2=minrank, 3=taxa_counts, 4=max_pcts, 5=na_pcts;
    # foreach my $tax_r (@taxReturn)
    # {
    #   print "RRR1: tax return = $tax_r\n";
    # }
    # Need to fix this issue in the Taxonomy module, rather than here.
    my $taxon = $taxReturn[0]->taxstring;
    # print LOG "EEE4: taxon = $taxon\n";
    my $rank  = $taxReturn[0]->depth;
    # print LOG "EEE5: rank = $rank\n";
    while ($taxon =~ /;Unassigned$/) {$taxon =~ s/;Unassigned$//;}
    if (! $taxon) {$taxon = "Unknown";}

    # don't trust below domain if too far from the hit
    if ( $distances{$id} >= $max_distance ) 
    {
      $taxon =~ s/;.*$//;
      $rank = "domain";
    } 

    # store the read in the load file
    # taxReturn: 0=taxObj, 1=winning vote, 2=minrank, 3=taxa_counts, 4=max_pcts, 5=na_pcts;
    $taxonomy_id_h->execute($taxon);
    $taxonomy_id = $taxonomy_id_h->fetchrow();
    unless ($taxonomy_id) { #if no such taxonomy, e.g. taxonomy string was truncated, then add it to the db and get an id
    print LOG "INSERT IGNORE INTO $taxonomy_table (taxonomy) VALUES (?)";
      &prep_exec_query_w_arg($dbh, $taxon, "INSERT IGNORE INTO $taxonomy_table (taxonomy) VALUES (?)");       
      $taxonomy_id_h->execute($taxon);
      $taxonomy_id = $taxonomy_id_h->fetchrow();         
    }
    $rank_id_h->execute($rank);
    $rank_id     = $rank_id_h->fetchrow();
    $minrank_id_h->execute($taxReturn[2]);
    $minrank_id  = $minrank_id_h->fetchrow();

    for my $read_id (@reads)
    {
      print TAGTAX_OUT         join("\t", $read_id, $taxonomy_id, $rank_id) . "\n";  
      print TAX_ASSIGNMENT_OUT join("\t", $read_id, scalar @taxObjects, $taxReturn[1], $minrank_id, $taxReturn[3], $taxReturn[4], $taxReturn[5]) . "\n";
    }
  } else 
  {
  	# No real blast hit
  	# (read_id, taxonomy, rank, refssu_count, vote, minrank, taxa_counts, max_pcts, na_pcts)
    for my $read_id (@reads)
    {
      $taxonomy_id_h->execute("Unknown");
      $taxonomy_id = $taxonomy_id_h->fetchrow();
      $rank_id_h->execute("NA");
      $rank_id = $minrank_id  = $rank_id_h->fetchrow();
      
      # print OUT join("\t", $r, "Unknown", "NA", 0, 0, "NA", '0;0;0;0;0;0;0;0', '0;0;0;0;0;0;0;0', '100;100;100;100;100;100;100;100', '1') . "\n";
      print TAGTAX_OUT         join("\t", $read_id, $taxonomy_id, $rank_id) . "\n";
      print TAX_ASSIGNMENT_OUT join("\t", $read_id, 0, 0, $minrank_id, '', '',  '') . "\n";
    }   
  }
}

#######################################
#
# Close the file and import to the database
#
#######################################
close(NAMES);
close(TAGTAX_OUT);
close(TAX_ASSIGNMENT_OUT);

### use mysqlimport to load up the data into the tables
my $columns = "--columns='read_id','taxonomy_id','rank_id'";

warn "Importing taxonomy results from $tagtax_tmp_filename into $tagtax_table ...\n";
&insert_file_into_table(replace=>$replace, columns=>$columns, out_filename=>$tagtax_tmp_filename, log_filename=>$log_filename);

warn "Importing taxonomy results from $tax_assignment_tmp_filename into $tax_assignment_table ...\n";
$columns = "--columns='read_id','refssu_count','vote','minrank_id','taxa_counts','max_pcts','na_pcts'";
&insert_file_into_table(replace=>$replace, columns=>$columns, out_filename=>$tax_assignment_tmp_filename, log_filename=>$log_filename);

# $dbh->disconnect;

# ------- Subroutines -------

#######################################
#
# Create temp file name
# Example: $tagtax_tmp_filename = &create_temp_file_name($tagtax_table);
# 
#######################################
sub create_temp_file_name()
{
  my $table_name    = shift;
  my $tmp_filename  = $table_name;
  $tmp_filename     =~ s/$db_name\.//;
  $tmp_filename     = $tmp_dir . $tmp_filename . "." . substr(rand(), -6);
  return $tmp_filename;
}
