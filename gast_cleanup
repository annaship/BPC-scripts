#!/usr/bin/env perl

#########################################
#
# gast_cleanup: imports blast data to database and runs gast 
#
# Author: Susan Huse, shuse@mbl.edu
#
# Date: Tue Jan  9 06:55:53 EST 2007
#
# Keywords : if you want seqinfoname to find this, remove the space before the colon 
# 
# Assumptions: 
#
# Revisions:
#
# Programming Notes:
#
########################################
use strict;
use warnings;
use Conjbpcdb;
use File::Temp qw/ tempfile /;
use Cwd;
require 'pipeline_subs.pl'; #subroutines

#######################################
#
# Set up usage statement
#
#######################################
my $scriptHelp = "
 gast_cleanup - follows clustergast, explodes the data and copies to gast_concat and gast
\n";

my $usage = "
   Usage:  gast_cleanup -r run -reg vregion -ig gastTable
      ex:  gast_cleanup -r 20070920
           gast_cleanup -r 20071203 -reg v3
           gast_cleanup -r 20080319 -reg v9 -dw \"WHERE project='Euk V9 Test'\"
           gast_cleanup -ig gast_20081009_2154_v9 -reg v9 -dw \"WHERE project='Euk V9 Test'\"

 Options:  
           -r    run date
           -reg  is the variable region it was mapped to (default=v6)

           -ig   input gast table [default: gast_rundate_vregion]
           -n    names file [default: gast/run_date/run_date.names]
           -og   output gast table [default = gast]
           -ogc  output gast_concat table [default = gast_concat]

           -no_copy      don't copy the results into the gast and gast_concat tables
           -no_explode   don't explode gast_rundate_source table
           -no_nonhits   don't insert non-hits into gast_rundate_source table
           -t    tmp dir [default: /usr/local/tmp/]

\n";

#           -dw   where string to subset the duplicates 
#                 (in addition to deleted=0 and run=? and source=region)
#######################################
#
# Definition statements
#
#######################################
#Commandline parsing
#my $argNum = 3;
#my $minargNum = 2;
#my $maxargNum = 4;
my $verbose = 1;

#Runtime variables
my $run;
my $db_name						  = "env454";
my $db_host						  = "newbpcdb2";
my $log_filename				= "gast_cleanup.log";
my $vregion						  = "v6";
my $outGastTable				= "gast";
my $outGastConcatTable  = "gast_concat";
my $inGastTable					= "";
my $names_filename			= "";
my $ignore						  = "IGNORE";
my $insert						  = "INSERT";  #as opposed to REPLACE
my $tmpDir						  = "/usr/local/tmp/";
my $do_explode					= 1;
my $do_copy						  = 1;
my $do_nonhits					= 1;
my $dbh                 = &db_connect($db_host, $db_name);


#######################################
#
# Test for commandline arguments
#
#######################################

if (! $ARGV[0] ) 
{
	print $scriptHelp;
	print $usage;
	exit -1;
} 
my $gast_cleanup_cmd = join(" ", $0, @ARGV);

while ((scalar @ARGV > 0) && ($ARGV[0] =~ /^-/))
{
	if ($ARGV[0] =~ /-h/) {
		print $scriptHelp;
		print $usage;
		exit 0;
#	} elsif ($ARGV[0] eq "-ref") {
#		shift @ARGV;
#		$v6refTable = shift @ARGV;
	} elsif ($ARGV[0] eq "-r" ) {
		shift @ARGV;
		$run = shift @ARGV;
	} elsif ($ARGV[0] eq "-reg") {
		shift @ARGV;
		$vregion = shift @ARGV;
	} elsif ($ARGV[0] eq "-n") {
		shift @ARGV;
		$names_filename = shift @ARGV;
	} elsif ($ARGV[0] eq "-ig") {
		shift @ARGV;
		$inGastTable = shift @ARGV;
	} elsif ($ARGV[0] eq "-og") {
		shift @ARGV;
		$outGastTable = shift @ARGV;
	} elsif ($ARGV[0] eq "-ogc") {
		shift @ARGV;
		$outGastConcatTable = shift @ARGV;
	} elsif ($ARGV[0] eq "-ogc") {
		shift @ARGV;
		$tmpDir = shift @ARGV;
	} elsif ($ARGV[0] eq "-no_explode") {
		shift @ARGV;
		$do_explode = 0; 
	} elsif ($ARGV[0] eq "-no_copy") {
		shift @ARGV;
		$do_copy = 0; 
	} elsif ($ARGV[0] eq "-no_nonhits") {
		shift @ARGV;
		$do_nonhits = 0; 
	} elsif ($ARGV[0] eq "-ignore") {
        shift @ARGV;
		$ignore = "IGNORE";
	} elsif ($ARGV[0] eq "-replace") {
        shift @ARGV;
		$insert = "REPLACE";
	} elsif ($ARGV[0] eq "-d") {
        shift @ARGV;
		$db_name = shift @ARGV;
	} elsif ($ARGV[0] eq "-v") {
		$verbose = 1;
		shift @ARGV;
	} elsif ($ARGV[0] =~ /^-/) { #unknown parameter, just get rid of it
        print "\nUnknown commandline flag \"$ARGV[0]\".\n";
        print $usage;
        exit -1;
	}
}

#######################################
#
# Parse commandline arguments, ARGV
#
#######################################
if (! $run) 
{
    print "run date required\n";
    print "$usage\n";
    exit;
}

if ( (! $run) && ( (! $inGastTable) && ($names_filename) ) )
{
	print "Incorrect number of arguments.\n";
	print "$usage\n";
	exit;
} 

if ( (! $do_copy) && (! $do_explode) && (! $do_nonhits) )
{
    print "Must specify a valid process, cannot skip explode, insert non-hits and copy.\n";
    print "$usage\n";
    exit;
}

my $run_region_name = $run . "_" . $vregion;

if ( ($run) && (! $inGastTable) )
{
    $inGastTable = "gast_" . $run_region_name;
}

if (! $names_filename) { $names_filename = $run_region_name . ".names"; }

#if (! -d $run) {
#	my $mkdirErr = system("mkdir $run");
#	if ($mkdirErr) {print LOG "Unable to create directory $run.  Exiting\n\n"; exit 2;}
#}   
    
#chdir $run;
#$log_filename = $run . "_" . $vregion . "/gast_cleanup.log";
my $logDir = $run_region_name;
chdir $logDir;  # go into the directory if it is there, otherwise don't worry about it
my $current_dir = cwd;
#if ($current_dir !~ /$logDir/) {warn "Need to run from the gast directory or $logDir.\n"; exit -1 ;}

open (LOG, ">$log_filename") || warn ("Unable to write to output log file: $log_filename.  No log kept.\n");
print LOG "$gast_cleanup_cmd\n";
if (! -f $names_filename) 
{ 
    warn "Unable to locate names file $names_filename.\n"; 
    print LOG "Unable to locate names file $names_filename\n"; 
    exit;
}

#######################################
#
# Explode the GAST table using the names file
#
#######################################
if ( ($do_explode) || ($do_nonhits) )
{
    if ($do_explode) {print "Exploding sequences in $inGastTable\n";}
    
    # 
    # read the names 
    #
    if ($verbose) {print LOG "Reading names file\n";}
    my %copies;
    my %nonhits;
    
    open (IN, "<$names_filename") || die "Unable to read names file $names_filename\n";
    while (my $line = <IN>)
    {
        chomp $line;
        (my $index_read, my $dupes) = split(/\t/, $line);

        $copies{$index_read} = [ split(/,/, $dupes) ];
        $nonhits{$index_read}++;
    }
    close(IN);

    #
    # Step through the gast records and insert the dupes
    #
    my $out_filename = $tmpDir . $inGastTable . ".dupes";
    my $out_filename_nonhits = $tmpDir . $inGastTable . ".nonhits";
    open(OUT, ">$out_filename") || die("Unable to write to output file: $out_filename.  Exiting.\n");
    if($verbose) {print LOG "Writing to temp file: $out_filename\n";}

    my $select_query = "SELECT read_id, refhvr_id, distance, alignment from $inGastTable";
    print LOG "$select_query\n";
    my $select_query_h = $dbh->prepare($select_query) or die "Unable to prepare statement: $select_query. Error: " . $dbh->errstr . "\n";
    $select_query_h->execute or die "Unable to execute SQL statement: $select_query.  Error: " . $select_query_h->errstr . "\n";
    
    my @gast_reads;
    while(my ($read, $ref, $dist, $align) = $select_query_h->fetchrow())
    {
        # if this was in the gast table zero it out because it had a valid hit
        # so we don't insert them as non-hits later

        if ( exists $nonhits{$read} ) { delete $nonhits{$read}; }

        if ($do_explode) 
        {
            if (! exists $copies{$read})  
            {
                warn "No names record for read_id $read.  Skipping\n"; 
                print LOG "No names record for read_id $read.\n";
                next;
            }

            # give the same ref and dist for each duplicate
            foreach my $d ( @{$copies{$read}} )
            {        
                if ($d ne $read)
                {
                  print OUT join("\t", $d, $ref, $dist, $align) . "\n";
                }
            }
        }
    }

    my $columns = "--columns='read_id','refhvr_id','distance','alignment'";
    if ($do_explode)
    {
      # use mysqlimport to load up the data into the gast table
      if ($verbose) {print LOG "Importing duplicate hits into $inGastTable\n";}
      &insert_file_into_table(columns=>$columns, out_filename=>$out_filename, log_filename=>$log_filename);

      if ($verbose) {print LOG "Removing temporary text file\n";}
      # remove temp file
      `rm $out_filename`;
      #print LOG "$out_filename\n";
    }
    
    #######################################
    #
    # Insert a record for any valid sequence that had no blast hit and therefore no gast result
    #
    #######################################
    if ($do_nonhits) 
    {
        print "Inserting non-BLAST hits into $inGastTable\n";
        open(OUT, ">$out_filename_nonhits") || die("Unable to write to output file: $out_filename_nonhits.  Exiting.\n");

        # for the list of remaining reads add them in with their duplicates
        for my $read (sort keys %nonhits)
        {
            foreach my $d ( @{$copies{$read}} )
            {        
                print OUT join("\t", $d, 0, 1, '') . "\n";
            }
        }

        # use mysqlimport to load up the data into the gast table
        if($verbose) {print LOG "Importing non-hits into $inGastTable\n";}
        &insert_file_into_table(columns=>$columns, out_filename=>$out_filename_nonhits, log_filename=>$log_filename);

        # remove temp file
        if ($verbose) {print LOG "Removing temporary text file\n";}
        `rm $out_filename_nonhits`;
    }
}

#######################################
#
# Insert records into gast_concat
#
#######################################
if ($do_copy)
{
    print "Inserting records into $outGastConcatTable\n";
    &prep_exec_query($dbh, "$insert $ignore INTO $outGastConcatTable (read_id, distance, refhvr_ids) SELECT read_id, distance, 
      GROUP_CONCAT(DISTINCT refhvr_id ORDER BY refhvr_id ASC SEPARATOR ' ') 
      as refhvr_ids FROM $inGastTable GROUP BY read_id");

#######################################
#
# Insert records into gast
#
#######################################
    print "Inserting records into $outGastTable\n";
    &prep_exec_query($dbh, "$insert $ignore INTO $outGastTable (read_id, refhvr_id, distance, alignment) SELECT read_id, refhvr_id, distance, alignment FROM $inGastTable");
}

close(LOG);
