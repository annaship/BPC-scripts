#!/usr/bin/env perl

#########################################
#
# refssu2hvr: cuts out variable regions from env454.refssu
#
# Author: Susan Huse, shuse@mbl.edu
#
# Date: Sat Oct 13 13:28:19 EDT 2007
#
# Copyright (C) 2008 Marine Biological Laboratory, Woods Hole, MA
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# For a copy of the GNU General Public License, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
# or visit http://www.gnu.org/copyleft/gpl.html
#
# Keywords: GAST taxonomy refssu 454 database refhvr bend_with_primers
# 
# Assumptions: 
#
# Revisions:
#
# Programming Notes:
#
########################################
use strict;
use warnings;
use Conjbpcdb;

#######################################
#
# Set up usage statement
#
#######################################
my $scriptHelp = "
 refssu2hvr - cuts out regions of the 16s based on primer locations
\n";

my $usage = "
   Usage:  refssu2hvr hypervariable_region
      ex:  refssu2hvr v6

 Options:  
           -v   verbose only -- outputs the SQL statements, but does not run them.
           -r   sets the 16s reference table name (default: refssu)
           -d   sets the database name (default: env454)
           -min sets the minimum accepted length for the sequence
           -s   silva version number
\n";
#           -hvr hypervariable region
#           -p   the primers locations to use (be sure that the 5' is first and the 3' is second)
#           -k   keep the primer specified

#######################################
#
# Definition statements
#
#######################################
#Commandline parsing
my $argNum = 1;

#Runtime variables
my $db_host = "newbpcdb2";
my $dbName = "env454";

# Reference (silva) tables to pull from
my $refTable = "refssu"; 
my $primerLocationsTable = "refssu_primerlocs";
my $vRegion = ""; # hypervariable region of choice
my $primers = "";
my $silva_version_number = "";

my $min_length = 50;
# Data to create
my $vTable = ""; # Output Refhvr table
my $seqField = "sequence"; # output sequence field

my $verbose = 0;

#######################################
#
# Test for commandline arguments
#
#######################################

if (! $ARGV[0] ) 
{
	print $scriptHelp;
	print $usage;
	exit -1;
} 

while ((scalar @ARGV > 0) && ($ARGV[0] =~ /^-/))
{
	if ($ARGV[0] =~ /-h/) {
		print $scriptHelp;
		print $usage;
		exit 0;
	} elsif ($ARGV[0] eq "-d") {
		shift @ARGV;
		$dbName = shift @ARGV;
	} elsif ($ARGV[0] eq "-r") {
		shift @ARGV;
		$refTable = shift @ARGV;
	} elsif ($ARGV[0] eq "-min") {
		shift @ARGV;
		$min_length = shift @ARGV;
	} elsif ($ARGV[0] eq "-s") {
		shift @ARGV;
		$silva_version_number = shift @ARGV;
	} elsif ($ARGV[0] eq "-v") {
		shift @ARGV;
		$verbose = 1;
	} elsif ($ARGV[0] =~ /^-/) { #unknown parameter, just get rid of it
		print "Unknown commandline flag \"$ARGV[0]\".";
		print $usage;
		exit -1;
	}
}


#######################################
#
# Parse commandline arguments, ARGV
#
#######################################

if (scalar @ARGV != $argNum) 
#if ((scalar @ARGV < $minargNum) || (scalar @ARGV > $maxargNum)) 
#if ( (! $dbName) || (! $inFilename) )
{
	print "Incorrect number of arguments.\n";
	print "$usage\n";
	exit;
} 

$vRegion = $ARGV[0];
$vTable = "refhvr_" . $vRegion;
my $alignTable = $refTable . "_align";

#######################################
#
# SQL statements
#
#######################################

my $condb = Conjbpcdb::new($db_host, $dbName);
my $dbh = $condb->dbh();


# Query to save out the old table
my $dropPreviousTable = "DROP TABLE IF EXISTS $vTable" . "_previous";
my $dropPreviousTable_h = $dbh->prepare($dropPreviousTable) or die "Unable to prepare statement: $dropPreviousTable.  Error: " . $dbh->errstr . "\n";

my $renameTable = "RENAME TABLE $vTable TO $vTable" . "_previous";
my $renameTable_h = $dbh->prepare($renameTable) or die "Unable to prepare statement: $renameTable.  Error: " . $dbh->errstr . "\n";

# Query to create a new table if necessary
my $vTable_id_name = $vTable . "_id";
print "HERE01: vTable_id_name = $vTable_id_name\n";
my $createTable = "CREATE TABLE IF NOT EXISTS $vTable (
  $vTable_id_name mediumint(8) unsigned NOT NULL AUTO_INCREMENT PRIMARY KEY,
  `refhvr_id` varchar(16) NOT NULL default '',
  `refssu_name_id` mediumint(8) unsigned NOT NULL,
  `taxonomy_id` mediumint(8) unsigned NOT NULL,
  `sequence` text NOT NULL,
  FOREIGN KEY (`taxonomy_id`) REFERENCES `taxonomy` (`taxonomy_id`),
  FOREIGN KEY (`refssu_name_id`) REFERENCES `refssu_name` (`refssu_name_id`)
) ENGINE=innodb DEFAULT CHARSET=latin1 COMMENT='$vRegion region excised from $refTable'";

my $createTable_h = $dbh->prepare($createTable) or die "Unable to prepare statement: $createTable.  Error: " . $dbh->errstr . "\n";

# Empty the vregion table for the new data
my $emptyTable = "Truncate table $vTable";
my $emptyTable_h = $dbh->prepare($emptyTable) or die "Unable to prepare statement: $emptyTable.  Error: " . $dbh->errstr . "\n";

# Cut the reference string and insert into the refv6 table
#
# If vRegion is v9, the distal primer for the full-length may actually be 
# the same as for the v9, so we can't assume that there would be any sequence
# remaining after the v9 region.  Terminal gaps in the hypervariable region 
# alignment mean you can't just step one base before the primer to check for
# completion.  So, if not v9 then be sure you have valid bases outside the
# region, if v9 just be sure you are >$min_length.

my $insertVseq = 
"INSERT INTO $vTable (refssu_name_id, taxonomy_id, sequence) 
SELECT refssu_name_id, taxonomy_id,
replace(substring(a.sequence, ?, ?), '-', '') as hvrsequence
FROM $refTable join $alignTable as a using(refssu_name_id)
WHERE deleted=0 AND replace(substring(a.sequence,1,?), '-', '') != '' ";

if ($vRegion ne "v9") 
{ $insertVseq .= " AND replace(substring(a.sequence, ?), '-', '') != '' ";}

$insertVseq .= "
HAVING length(hvrsequence) >= $min_length AND hvrsequence not like '%N%'";

my $insertVseq_h = $dbh->prepare($insertVseq) or die "Unable to prepare statement: $insertVseq.  Error: " . $dbh->errstr . "\n";
print "$insertVseq\n\n";

#######################################
#
# Get the cutting information
#
#######################################
my $start_with_primers;
my $end_with_primers;
my $start_vregion;
my $end_vregion;
my $cut_length;
my $start_cut; 
my $end_cut;
my $include_forward = 0;
my $include_reverse = 0;
my $use_silva_version_number = "";

if ($silva_version_number)
{
  $use_silva_version_number = " AND silva_version = '" . $silva_version_number . "'";
}

# Select the primer cutting information
my $selectPrimers = "SELECT primer, direction, start, end FROM $primerLocationsTable WHERE region='" . $vRegion . "'" . $use_silva_version_number;
if ($verbose) 
{
  print "$selectPrimers\n";
}
my $selectPrimers_h = $dbh->prepare($selectPrimers) or die "Unable to prepare statement: $selectPrimers.  Error: " . $dbh->errstr . "\n";
$selectPrimers_h->execute() or die "Unable to execute SQL statement: $selectPrimers.  Error: " . $selectPrimers_h->errstr . "\n";

#Get the location information
while(my ($primer_name, $direction, $primer_start, $primer_end) = $selectPrimers_h->fetchrow()) 
{ 
	# The aligned sequence needs to completely include both the forward and reverse primers 
	# to be cut correctly
	# The start_with_primers base of the region will be the base after the end of the forward primer
	# The end_with_primers base of the region will be the base before the start of the reverse primer

    print join(", ", $primer_name, $direction, $primer_start, $primer_end) . "\n"; 
	if ($direction eq "F") 
    {
        $start_with_primers = $primer_start; 
        $start_vregion = $primer_end + 1;
    }

	if ($direction eq "R") 
    {
        $end_with_primers = $primer_end; 
        $end_vregion = $primer_start - 1;
    }

    if ($primer_name =~ /-a$/i) 
    {
        if ($direction eq "F") { $include_forward = 1; }
        elsif ($direction eq "R") {$include_reverse = 1; }
    }
}

if ( (! $include_forward) && (! $include_reverse) ) 
{
    # don't include anything in between
    $cut_length = $end_vregion - $start_vregion + 1;
    $start_cut = $start_vregion;
    $end_cut = $end_vregion;
} elsif ( ($include_forward) && ($include_reverse) ) {
    $cut_length = $end_with_primers - $start_with_primers + 1;
    $start_cut = $start_with_primers;
    $end_cut = $end_with_primers;
} elsif ($include_forward) {
    $cut_length = $end_vregion - $start_with_primers + 1;
    $start_cut = $start_with_primers;
    $end_cut = $end_vregion;
} elsif ($include_reverse) {
    $cut_length = $end_with_primers - $start_vregion + 1;
    $start_cut = $start_vregion;
    $end_cut = $end_with_primers;
} else {
    print "Confusion over inclusion of primers in the export.  Quitting\n";
    exit;
}
    
if ($verbose) 
{
    print "Start and end with primers: $start_with_primers to $end_with_primers\n";
    print "Start and end of vregion between primers: $start_vregion to $end_vregion\n";
    print "Cut length: $cut_length\n";
}

#######################################
#
# Get the tables ready
#
#######################################

if (! $verbose)
{
	print "Preparing $createTable\n\n";

	$dropPreviousTable_h->execute or warn "Unable to drop previous $vTable: $dropPreviousTable.  Error: " . $dropPreviousTable_h->errstr . "\n";
	$dropPreviousTable_h->finish;

	$renameTable_h->execute or warn "No previous $vTable table to rename: $renameTable.  Error: " . $renameTable_h->errstr . "\n";
	$renameTable_h->finish;

	$createTable_h->execute or die "Unable to execute SQL statement: $createTable.  Error: " . $createTable_h->errstr . "\n";
	$createTable_h->finish;

	$emptyTable_h->execute or die "Unable to execute SQL statement: $emptyTable.  Error: " . $emptyTable_h->errstr . "\n";
	$emptyTable_h->finish;

} else {
	print "\n\nPreparing Tables:\n\n";
	print "$dropPreviousTable\n\n";
	print "$renameTable\n\n";
	print "$createTable\n\n";
	print "$emptyTable\n\n";
}

#######################################
#
# Excise the region and insert into the database
#	get the start and stop points for the primers / vregion
#   use those in the sql select statement
#
#######################################


if (! $verbose)
{
	print "$insertVseq\n";
	print "$start_vregion, $cut_length, $start_with_primers, $end_with_primers\n";
}

#
# Insert vregion data into $vTable
#
if (! $verbose) 
{
	if ($vRegion ne "v9") 
	{
		$insertVseq_h->execute($start_cut, $cut_length, $start_with_primers, $end_with_primers) or die "Unable to execute SQL statement: $insertVseq.  Error: " . $insertVseq_h->errstr . "\n";
	} else {
		$insertVseq_h->execute($start_cut, $cut_length, $start_with_primers) or die "Unable to execute SQL statement: $insertVseq.  Error: " . $insertVseq_h->errstr . "\n";
	}
} else {
	# If verbose, just print out the string
	my $insertString = $insertVseq;
	$insertString =~ s/\?/$start_cut/;
	$insertString =~ s/\?/$cut_length/;
	$insertString =~ s/\?/$start_with_primers/;
	$insertString =~ s/\?/$end_with_primers/;
	print "$insertString\n\n";
}

#######################################
#
# Update the refhvr_id values
#
#######################################
# This isn't happening, so I am commenting it out.
# See wiki for instructions on the SQL statement
#print "Calculate refhvr_id values\n";
#my $vID = $vRegion . "_";
#
#my $calcHvrID = "set \@a=0;
#update $vTable as r2 join
#(select concat(\"$vID\", 
#char( floor(( (\@a:=\@a+1) - mod(\@a, 1000)) / 1000 / 26) + 65),
#char(mod(((\@a - mod(\@a, 1000)) / 1000), 26) + 65),
#lpad(mod(\@a,1000),3,0)) as refhvr_id, 
#sequence
#from (select sequence, count(*) as seqcnt from $vTable group by sequence) as t1 ) as t2
#using(sequence)
#set r2.refhvr_id = t2.refhvr_id";
#
#my $calcHvrID_h = $dbh->prepare($calcHvrID) or die "Unable to prepare statement: $calcHvrID.  Error: " . $dbh->errstr . "\n";
#
#if (! $verbose) 
#{
#	$calcHvrID_h->execute or die "Unable to execute SQL statement: $calcHvrID.  Error: " . $calcHvrID_h->errstr . "\n";
#} else {
#	print "$calcHvrID\n";
#}
#

# not needed on new
# if (! $verbose) 
# {
#   $cleanBoots_h->execute or die "Unable to execute SQL statement: $cleanBoots.  Error: " . $cleanBoots_h->errstr . "\n";
# } else {
#   print "UPDATE $vTable set rdp_boot = '' where taxon_source != 'RDP';\n\n";
# }


$dbh->disconnect;
