#!/usr/bin/env perl

#########################################
#
# otu2tax: assign consensus taxonomic strings to read_ids in the tables
#
# Author: Susan Huse, shuse@mbl.edu
#
# Date: Sat Oct 20 18:00:50 EDT 2007
#
# Copyright (C) 2008 Marine Biological Laboratory, Woods Hole, MA
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# For a copy of the GNU General Public License, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
# or visit http://www.gnu.org/copyleft/gpl.html
#
# Keywords: 454 database taxonomy ref16s dotur otu cluster
# 
# Assumptions: 
#
# Revisions:  1) Removed the boot levels, defaulting to 80, but reftable now uses other
#             sources, too.  We can put the boot scores back in later.  
#             2) Add illumina platform tables from env454. 2012-09-24 A Shipunova
#
# Programming Notes:
#
########################################
use strict;
use warnings;
use Conjbpcdb;
use Taxonomy;

#######################################
#
# Set up usage statement
#
#######################################
my $scriptHelp = "
 otu2tax - assign consensus taxonomy to dotur clusters
\n";

my $usage = "
   Usage:  otu2tax -platform [illumina|454] -l list_file -uc uc_file -w cluster_width -t sourceTaxTable -m majority > outputfile
      ex:  otu2tax -l ENV1.fa.m2.fn.list -w unique -t tagtax -m 66 > clustertax.txt
           otu2tax -l ENV1.fa.m2.fn.list -w 0.03  > clustertax.txt
           otu2tax -c mydata.otu.dist_03.txt  > clustertax.txt
           The only option tested for Illumina at present (2012-10-12):
           otu2tax -platform illumina -uc my_file.uc -u > clustertax.txt

 Options:  
           -l   name of the mothur list file containing the read_ids for each cluster 
           -uc  name of a UClust (USearch) readmap.uc file, no -w required
           -c   name of a cdhit otu.dist_*.txt file (specify only one mothur list of cdhit dist file)
           -w   mothur width to calculate (unique, 0.01, 0.02 ... 0.10).
           -m   percent required for a majority consensus [default: 66]
           -t   source taxonomy table [default: tagtax]
           -g   source gast distance table [default: gast_concat]
           -u   include number of unique sequences per OTU in the output [default: false]
           -db  database name to lookup reads [default: env454]
           -platform platform name, to know tables (Illumina or 454) [default: 454]
\n";

#######################################
#
# Definition statements
#
#######################################
my $db_host = "newbpcdb2";
my $db_name = "env454";
my $tax_table = "tagtax_view";
my $seq_table = "trimseq_view";
my $gast_table = "gast_concat";
my $majority = 66;
my $list_filename;
my $cdhit_filename;
my $uc_filename;
my $out_table;
my $nodes = 40;
my $limit = "";
my $cluster_width;
my %clusterTax;
my $do_uniques = 0;
my $platform = "454";
my $selectTax;
my $seq_freq;

#######################################
#
# Test for commandline arguments
#
#######################################

if (! $ARGV[0] ) 
{
    print $scriptHelp;
    print $usage;
    exit -1;
} 

while ((scalar @ARGV > 0) && ($ARGV[0] =~ /^-/))
{
    if ($ARGV[0] =~ /-h/) {
        print $scriptHelp;
        print $usage;
        exit 0;
    } elsif ($ARGV[0] eq "-l") {
        shift @ARGV;
        $list_filename = shift @ARGV;
    } elsif ($ARGV[0] eq "-uc") {
        shift @ARGV;
        $uc_filename = shift @ARGV;
    } elsif ($ARGV[0] eq "-c") {
        shift @ARGV;
        $cdhit_filename = shift @ARGV;
    } elsif ($ARGV[0] eq "-w") {
        shift @ARGV;
        $cluster_width = shift @ARGV;
    } elsif ($ARGV[0] eq "-t") {
        shift @ARGV;
        $tax_table = shift @ARGV;
    } elsif ($ARGV[0] eq "-g") {
        shift @ARGV;
        $gast_table = shift @ARGV;
    } elsif ($ARGV[0] eq "-m") {
        shift @ARGV;
        $majority = shift @ARGV;
    } elsif ($ARGV[0] eq "-db") {
        shift @ARGV;
        $db_name = shift @ARGV;
    } elsif ($ARGV[0] eq "-host") {
        shift @ARGV;
        $db_host = shift @ARGV;
    } elsif ($ARGV[0] eq "-n") {
        shift @ARGV;
        $nodes = shift @ARGV;
    } elsif ($ARGV[0] eq "-u") {
        shift @ARGV;
        $do_uniques = 1;
    } elsif ($ARGV[0] eq "-platform") {
        shift @ARGV;
        $platform = shift @ARGV;
    } elsif ($ARGV[0] =~ /^-/) { #unknown parameter, just get rid of it
        print "Unknown commandline flag \"$ARGV[0]\".";
        print $usage;
        exit -1;
    }
}

#######################################
#
# Parse commandline arguments, ARGV
#
#######################################

if ( (! $list_filename) && (! $cdhit_filename) && (! $uc_filename) )
{
    print "Please specify an input mothur list, uclust readmap or cdhit otu file\n";
    print "$usage\n";
    exit;
} 

if ( ($uc_filename) && ( ($list_filename) || ($cluster_width) ) )
{
    print "Please use either a mothur list file with a cluster width or a UClust readmap file, not both\n";
    print "$usage\n";
    exit;
}

if ( ($cdhit_filename) && ( ($list_filename) || ($cluster_width) ) )
{
    print "Please use either a mothur list file with a cluster width or a cdhit file, not both\n";
    print "$usage\n";
    exit;
}

if ( ($cdhit_filename) && ($uc_filename) )
{
    print "Please use either a uclust readmap file or a cdhit file, not both\n";
    print "$usage\n";
    exit;
}

if ( ($cluster_width) && ( ($cdhit_filename) || ($uc_filename) ) )
{
    print "Please do not use a cluster width specification with either cdhit or uclust readmap files.\n";
    print "$usage\n";
    exit;
}

if ( ($list_filename) && (! $cluster_width) )
{
    print "A mothur list file requires a clustering width selection\n";
    print "$usage\n";
    exit;
}

$platform = lc($platform);
&open_log();
print LOG "==============\nPlatform = $platform\n==============\n";


#######################################
#
# SQL
#
#######################################

my $condb = Conjbpcdb::new($db_host, $db_name);
my $dbh = $condb->dbh();

# SELECT taxa
if ($platform eq "454")
{
  $selectTax = "SELECT taxonomy, g.distance from $tax_table as x join $gast_table as g using(read_id) where read_id = ?";  
}
elsif ($platform eq "illumina")
{
  $selectTax = "SELECT taxonomy, gast_distance FROM sequence_uniq_info_ill 
  JOIN taxonomy using(taxonomy_id)
  JOIN sequence_pdr_info_ill USING(sequence_ill_id)
  WHERE sequence_pdr_info_ill_id = ?";
}
else
{
  print LOG "Please provide a platform name (Illumina or 454)\n";
  print "Please provide a platform name (Illumina or 454)\n";
  exit;
}
print LOG "SSS1: selectTax = $selectTax\n";

my $selectTax_h = $dbh->prepare($selectTax) or die "Unable to prepare statement: $selectTax. Error: " . $dbh->errstr . "\n";

# SELECT sequence
my $selectSeq;
my $selectSeq_h;
if ($do_uniques and $platform eq "454") 
{
    $selectSeq = "SELECT sequence from $seq_table where read_id = ?";
    print LOG "SSS2: $selectSeq\n";
    $selectSeq_h = $dbh->prepare($selectSeq) or die "Unable to prepare statement: $selectSeq. Error: " . $dbh->errstr . "\n";
}
elsif ($platform eq "illumina")
{
  $selectSeq = "SELECT seq_count FROM sequence_pdr_info_ill 
  WHERE sequence_pdr_info_ill_id = ?";  
  print LOG "SSS3: selectSeq = $selectSeq\n";
  $selectSeq_h = $dbh->prepare($selectSeq) or die "Unable to prepare statement: $selectSeq. Error: " . $dbh->errstr . "\n";
}

#######################################
#
# Read the mothur list file and load up the clusters
#
#######################################
my $loaded = 0;
my $clusterID = 1;


# Print out the header information
print join("\t", "Cluster_ID", "Taxonomy", "Rank", "Cluster_Size", "Min_GDist", "Avg_GDist", "Vote", "Min_rank", "Taxa_counts", "Max_pcts", "Na_pcts");
if ($do_uniques) 
{ 
  print "\tCount_Uniq_Seqs";
  # print LOG "CCC1: print Count_Uniq_Seqs\n";
}
print "\n";

#
# Step through the mothur list file
#
if ($list_filename) 
{
    # Read in the list file
    open (IN, $list_filename) or die "Unable to open mothur list file: $list_filename.  Exiting\n\n";
    while (my $line = <IN>) 
    {
      print LOG "LLL1: in # Step through the mothur list file: line = $line\n";
        # Check for the chosen cluster width
        if ($line =~ /^$cluster_width/)
        {
            # Clean and parse the line
            chomp $line;
    
            # clusters are separated by tabs
            my @line_data = split(/\t/, $line);
            shift(@line_data); # peel off the clustering width
            shift(@line_data); # peel off the number of clusters
    
            # Step through each cluster, look up the read taxonomy and calculate the consensus
            foreach my $c (@line_data)
            {
                # reads in a cluster are separated by commas
                my @idArray = split(/,/, $c);
    
                # Look up the taxonomy for each read
                print_taxonomy($clusterID, \@idArray);
    
                # increment the cluster ID
                $clusterID++;
            }
    
            # Have calculated the taxonomy
            $loaded = 1;
        } 
        
        # Skip remaining lines in the file if you are done
        if ($loaded) {last;}
    }
} elsif ($uc_filename) {
    # create a hash of an array containing the reads for each cluster
    my %reads_in_cluster;

    # Read in the uclust readmap file
    open (IN, $uc_filename) or die "Unable to open uclust readmap file: $uc_filename.  Exiting\n\n";
    while (my $line = <IN>) 
    {
        if ($line !~ /^H/) {next;}  # skip comment lines at the top, and anything that is not a hit
        chomp $line;
        my @line_data = split(/\t/, $line);
        # print LOG "LLL2, in Read in the uclust readmap file: line = $line\n";
        #clean read id just in case
        my $read_id = $line_data[8];
        $read_id =~ s/\|.*$//;

        # clean cluster id
        my $cluster_id = $line_data[9];
        $cluster_id =~ s/;.*$//;

        push (@{$reads_in_cluster{$cluster_id}}, $read_id);
        print LOG "LLL3, in Read in the uclust readmap file: read_id = $read_id; cluster_id = $cluster_id\n";
    }

    foreach my $c (sort keys %reads_in_cluster)
    {   
        print_taxonomy($c, \@{$reads_in_cluster{$c}});
    }

    
} else {
    # Read in the cd-hit file
    open (IN, $cdhit_filename) or die "Unable to open cd-hit dist file: $cdhit_filename.  Exiting\n\n";
    while (my $line = <IN>) 
    {
        # parse the line.  OTU_ID \t reads separated by semicolons
        chomp $line;
        my @data = split(/\t/, $line);
        my @idArray = split(/;/, $data[1]);

        print_taxonomy($data[0], \@idArray);
    }
}
        
#######################################
#
# Close the files
#
#######################################
close(IN);
if (defined $selectSeq_h) { $selectSeq_h->finish; }
if (defined $selectTax_h) { $selectTax_h->finish; }
$dbh->disconnect;

exit;
#######################################
##
## Subroutine: assign_taxonomy
##       get dupes from the names file and calculate consensus taxonomy
##
########################################
sub print_taxonomy
{
    my $clusterID = shift;
    my $idArrayRef = shift;

    my @taxObjects;
    my %freq_of_uniq;
    my $min_distance = 1;
    my $avg_distance = 0;
    my $seq_amount   = 0;
    print LOG "TTT-1 in print_taxonomy: \$clusterID = $clusterID\n";
    
    foreach my $id (@$idArrayRef)
    {
        get_seq_freq(\%freq_of_uniq, $id);
        $seq_amount += $seq_freq;
        print LOG "FFF10: \$seq_amount = $seq_amount\n";
        $selectTax_h->execute($id) || die "Unable to execute SQL statement ($selectTax).  Error: " . $selectTax_h->errstr . "\n";
        if ($selectTax_h->rows == 0) 
        {
            warn "Read $id was not found in the database using:\n\"$selectTax\" \nExiting...\n";
        } else {
            while(my ($tax, $distance) = $selectTax_h->fetchrow()) 
            { 
              print LOG "TTT0 in print_taxonomy: \$id = $id; \$tax = $tax;\n";
                # Load the taxonomy object
                if ($platform eq "illumina") 
                {
                  my $count = 0;
                  for ($count = $seq_freq; $count >= 1; $count--) {
                  	print LOG "$count ";
                    push (@taxObjects, Taxonomy->new($tax));                   
                  }                 
                }
                else
                {
                  push (@taxObjects, Taxonomy->new($tax));                   
                }

                # check for min distance and tally the distances for the average
                if ($min_distance > $distance) {$min_distance = $distance;}
                if ($platform eq "illumina")
                {
                  my $a = $distance * $seq_freq;
                  print LOG "AAA0: avg_distance before = $avg_distance; seq_freq = $seq_freq; distance = $distance;\n\$distance * \$seq_freq = $a\n";
                  $avg_distance += $a;                  
                  print LOG "AAA1: avg_distance = $avg_distance\n";
                }
                else
                {
                  $avg_distance += $distance;                  
                }
                print LOG "TTT1 in print_taxonomy: distance = $distance; \$min_distance = $min_distance; \$avg_distance = $avg_distance;\n";
            }
        }
    }
    print LOG "KKK0: " . scalar keys %freq_of_uniq;
    print LOG "\nKKK1: seq_amount = $seq_amount\n";
    
    print LOG "\n==================\n";
    while( my ($k, $v) = each %freq_of_uniq ) {
        print LOG "key: $k, value: $v.\n";
    }
    print LOG "\n==================\n";
    

    # Lookup the consensus taxonomy for the array
    foreach my $m0 (@taxObjects) 
    {
      foreach my $m01 (@{$m0}) 
      {
        print LOG "HERE0 = $m01\n";        
      }
      print LOG "\n==================\n";
    } 
    my @taxReturn = Taxonomy->consensus(@taxObjects, $majority);
    foreach my $m1 (@{$taxReturn[0]}) 
    {
	    print LOG "HERE2 = $m1\n";
    }
    foreach my $m (@taxReturn) 
    {
      print LOG "HERE1 = $m\n";
    } 
    
    print LOG "\n==================\n";
    
    # Finish calculating the average gast distance and round the distances
    if ($platform eq "illumina") 
    {
      $avg_distance = $avg_distance / $seq_amount;
    }
    else
    {
      $avg_distance = $avg_distance / (scalar @$idArrayRef);      
    }
    print LOG "MMM0: avg_distance = $avg_distance; majority = $majority\n";
    $avg_distance = int(($avg_distance * 10000) + 0.5) / 10000;
    print LOG "MMM1: avg_distance = $avg_distance; majority = $majority\n";
    $min_distance = int(($min_distance * 10000) + 0.5) / 10000;

    # Print out the returns
    # (read_id, taxonomy, rank, altlgi_count, vote, minrank, taxa_counts, max_pcts, na_pcts, uniqseqs)
    print LOG "avg_distance = $avg_distance; \$taxReturn[5] = $taxReturn[5]\n";
    print join("\t", $clusterID, $taxReturn[0]->taxstring, $taxReturn[0]->depth, scalar @taxObjects, $min_distance, $avg_distance, $taxReturn[1], $taxReturn[2], $taxReturn[3], $taxReturn[4], $taxReturn[5]);
    
    if ($do_uniques) {
      if ($platform eq "454")
      {
        $seq_freq = scalar keys %freq_of_uniq
      }
      elsif ($platform eq "illumina")
      {
        $seq_freq = $seq_amount
      }
      print LOG "FFF1: seq_freq = $seq_freq\n";
      print "\t" . $seq_freq;
    }
    print "\n";
}

sub open_log
{
  # my $file_name = time . '.log';
  # print "LOG in $file_name\n";
  my $file_name = 'otu2tax.log';
  open LOG, "+>", $file_name or die $!;
  my $time_start = scalar localtime();
  print LOG $time_start;
  print LOG "\n";
}

sub get_seq_freq()
{
  my ($freq_of_uniq_ref, $id) = @_;
  my %freq_of_uniq = %{$freq_of_uniq_ref};
  # Tally up the unique sequences while we are at it
  if ($do_uniques and $platform eq "454") 
  {
      $selectSeq_h->execute($id) || die "Unable to execute SQL statement ($selectSeq).  Error: " . $selectSeq_h->errstr . "\n";
      my ($seq) = $selectSeq_h->fetchrow(); 
      print LOG "SSS333: \$seq = $seq\n";
      $freq_of_uniq{$seq}++; 
  }
  elsif ($platform eq "illumina") 
  {
    # $selectSeq = "SELECT seq_count FROM sequence_pdr_info_ill 
    # WHERE sequence_pdr_info_ill_id = ?";  
    $selectSeq_h->execute($id) || die "Unable to execute SQL statement ($selectSeq).  Error: " . $selectSeq_h->errstr . "\n";
    ($seq_freq) = $selectSeq_h->fetchrow(); 
    $freq_of_uniq{$id} = $seq_freq;
    print LOG "FFF0: seq_freq = $seq_freq\n";
  }
  # return %freq_of_uniq;
}
