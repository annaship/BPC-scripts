#!/usr/bin/env perl

#########################################
#
# db2fasta: export sequences from a database to a fasta file
#
# Author: Susan Huse, shuse@mbl.edu  
# Date: 2006
#
# Copyright (C) 2006 Marine Biological Laborotory, Woods Hole, MA
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# For a copy of the GNU General Public License, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
# or visit http://www.gnu.org/copyleft/gpl.html
#
#
# Keywords: database convert export
# 
# Assumptions: 
#
# Revisions:
#
# Programming Notes:
#
########################################

use strict;
use warnings;
use Bio::Seq;
use Bio::SeqIO;
use Bio::Seq::PrimaryQual;
use IO::String;
use Conjbpcdb;
require 'pipeline_subs.pl'; #subroutines

#######################################
#
# Set up usage statement
#
#######################################
my $usage = 
" Usage:  db2fasta -d database_name -o output_fasta -sql sql_select_string -id id_field -seq sequence_field 
         db2fasta -d database_name -o output_fasta -id id_field -f sql_file

         db2fasta -o hs122.fa -sql 'select read_id, sequence from trimseq where project = \"AB_SAND_Bv6\" and dataset=\"HS122\"'
         db2fasta -o hs122.fastq -fmt fastq -sql 'select read_id, sequence, quality from trimseq as t join trimqual as q using(read_id) where project = \"AB_SAND_Bv6\" and dataset=\"HS122\"'
         db2fasta -d vamps -g vampsdb  -o vamps.fa -id id  -sql 'select read_id, sequence from vamps_sequences'

  Options:  -d    database  [default = env454]
            -g    hostname [default = jbpcdb]
            -id   id field name [default = read_id]
            -seq  sequence field name [default = sequence]
            -qual quality field name [default = quality]
            -o    output fasta file
            -f    file containing valid SQL statement
            -t    table if you want to export all records from one table
            -rc   reverse complement the sequence before printing
            -sql  sql statement if you want do use join or where clauses
            -fmt  output format: fasta, qual, fastq.  [default = fasta]
                  NB: when using qual or fastq formats, be sure your sql
                     statement includes the quality field
\n";

my $scripthelp = "
 db2fasta - exports sequence and/or quality information from a database to a fasta file.  
            All records in a table may be exported, specifying the table, 
            id and sequence data fields.  
            Or, an sql select statement can be used to export a subset
            of the sequence data.

";

#######################################
#
# Definition statements
#
#######################################
#Commandline parsing
my $argNum = 0;
#my $minargNum = 2;
#my $maxargNum = 4;
my $verbose = 0;

#Runtime variables
my $db_name       = "env454";
my $db_host       = "newbpcdb2";
my $out_filename;
my $sqlString;
my $tableName;
my $idField       = "read_id";
my $seqField      = "sequence";
my $qualField     = "quality";
my $revcomp       = 0;
my $output_format = "fasta";
my $inFilename    = "";


#/######################################
#
# Test for commandline arguments
#
#######################################

if (! $ARGV[0] ) {
	print $scripthelp;
	print $usage;
	exit -1;
} 

while ((scalar @ARGV > 0) && ($ARGV[0] =~ /^-/))
{
	if ($ARGV[0] =~ /-h/) {
		print $scripthelp;
		print $usage;
		exit 0;
	} elsif ($ARGV[0] eq "-d") {
		shift @ARGV;
		$db_name = shift @ARGV;
	} elsif ($ARGV[0] =~ "-g") {
		shift @ARGV;
		$db_host = shift @ARGV;
	}elsif ($ARGV[0] =~ "-o") {
		shift @ARGV;
		$out_filename = shift @ARGV;
	} elsif ($ARGV[0] =~ "-sql") {
		shift @ARGV;
		$sqlString = shift @ARGV;
	} elsif ($ARGV[0] =~ "-t") {
		shift @ARGV;
		$tableName = shift @ARGV;
	} elsif ($ARGV[0] =~ "-id") {
		shift @ARGV;
		$idField = shift @ARGV;
	} elsif ($ARGV[0] =~ "-seq") {
		shift @ARGV;
		$seqField = shift @ARGV;
	} elsif ($ARGV[0] =~ "-qual") {
		shift @ARGV;
		$qualField = shift @ARGV;
	} elsif ($ARGV[0] eq "-f") {
		shift @ARGV;
		$inFilename = shift @ARGV;
	} elsif ($ARGV[0] eq "-rc") {
		$revcomp = 1;
		shift @ARGV;
	} elsif ($ARGV[0] eq "-fmt") {
		shift @ARGV;
		$output_format = shift @ARGV;
        if ($output_format eq "quality") {$output_format = "qual";}
	} elsif ($ARGV[0] eq "-v") {
		$verbose = 1;
		shift @ARGV;
    } elsif ($ARGV[0] =~ /^-/) { #unknown parameter, just get rid of it
        print "Unknown commandline flag \"$ARGV[0]\".\n";
        print $usage;
        exit -1;
	}
}

#######################################
#
# Parse commandline arguments, ARGV
#
#######################################

if (scalar @ARGV != 0) {print "Unrecognized option: $ARGV[0]\n"; exit;}

if ((scalar @ARGV != $argNum) || (! $db_name ) || (! $out_filename) || (! $idField) || (! $seqField) ) 
{
	print "\n Specify a database, an output fasta file, an id field and a sequence field.\n\n";
	print "$usage\n";
	exit;
} 

if ( ( $sqlString && $tableName) || ($sqlString && $inFilename) || ($tableName && $inFilename)
|| ( (! $sqlString) && (! $tableName) && (! $inFilename) ) )
{
	print "\n Specify an SQL statement, a table name, or an input SQL file.\n\n";
	print "$usage\n";
	exit;
} 

if ( ($inFilename) && (! -f $inFilename) )
{
	print "\nError unable to locate input SQL file: $inFilename.  Exiting.\n\n";
	print "$usage\n";
	exit;
}

if ( ($output_format ne "fasta") && ($output_format ne "qual") && ($output_format ne "fastq") )
{
    print "\nPlease select a supported output format: fasta, qual, fastq. \n"; 
    print "$usage\n";
    exit;
}

#######################################
#
# Prepare the database and SELECT statement
#
#######################################

# my $mbl = Conjbpcdb::new($db_host, $db_name);
# my $dbh = $mbl->dbh();
my $dbh           = &db_connect($db_host, $db_name);

my $max_h = $dbh->prepare("set session group_concat_max_len = 10000000");
$max_h->execute;

#Select statement
if ($tableName) 
{
	#my $sqlString = "SELECT $idField as id, $seqField as seq FROM $tableName";
	$sqlString = "SELECT $idField, $seqField FROM $tableName";
} elsif ($inFilename) {
	open (IN, "<$inFilename") || die ("Unable to read input SQL file: $inFilename.  Exiting.\n");
	
	while (my $line = <IN>)
	{
		chomp $line;
		$line =~ s/^\s+//;
		$line =~ s/\s+$//;
		my @sqlData = split ("#", $line);
		if (exists $sqlData[0]) {$sqlString .= " " . $sqlData[0];}
	}
}

my $select_query_h = $dbh->prepare($sqlString);

if ($verbose) 
{
	print "Running db2fasta on $db_name writing to $out_filename
    and SQL statement: $sqlString\n"
};


#Check for data
$select_query_h->execute;
if ($select_query_h->rows < 1) 
{
	print "Sorry, no data found using query: $sqlString\n";
	exit 1;
}

#######################################
#
# Write out the data to the fasta file
#
#######################################

#Open the fasta file for writing
my $out;
if ($output_format eq "fasta")
{
    $out = Bio::SeqIO->new( '-file'=> ">$out_filename", '-format'=> "$output_format") || die ("Unable to write to output $output_format file: $out_filename.  Exiting...\n");
} else {
    open(OUT, ">$out_filename") || die("Unable to write to output file: $out_filename.  Exiting.\n");
}
#if ($output_format eq "fasta")
#{
#	$out = Bio::SeqIO->new( '-file'=> ">$out_filename", '-format'=> "fasta") || die ("Unable to write to output fasta file: $out_filename.  Exiting...\n");
#} elsif ($output_format eq "quality") {
#	$out = Bio::SeqIO->new( '-file'=> ">$out_filename", '-format'=> 'qual') || die ("Unable to write to output fasta file: $out_filename.  Exiting...\n");
#} elsif ($output_format eq "fastq") {
#    open(OUT, ">$out_filename") || die("Unable to write to output file: $out_filename.  Exiting.\n");
#} else {
#    print "Unrecognized output format \"$output_format\".  Sorry.\n"; exit;
#}

my $badSequences=0;
while (my $row = $select_query_h->fetchrow_hashref) 
{ 
    my $id;
    my $seq;
    my $qual;
    my $desc = "";

    #
    # Parse out the ID field (id and description for outputting with perl SeqIO)
    #
	if (! exists($row->{$idField})) {print "\nID field $idField not found in:\n\"$sqlString\"\n\n"; exit;}
    ### shuse 05092011 -- just take it all and don't second guess ID and description
	#my $init_id_value = $row->{$idField}; 
	$id = $row->{$idField}; 

    ### the read id is everything up to the first space
    ##$id = $init_id_value;
    ##$id =~ s/ .*$//;
    ##
    ### if null info then skip it
    ##if (! $id) { $badSequences++; next; }
    ##
    ### if there is more than the ID, call it description, 
    ##if ($id ne $init_id_value) 
    ##{
    ##    # remove ID and the remainder is description
    ##    $desc = $init_id_value;
    ##    $desc =~ s/$id //;
    ##}

    #
    # Parse out the sequence data
    #
    if ($output_format ne "qual")
    {
	    if (! exists($row->{$seqField})) {print "\nSequence field $seqField not found in:\n\"$sqlString\"\n\n"; exit;}
    	$seq = $row->{$seqField}; 

        # if null info then skip it
        if (! $seq) { $badSequences++; next; }
    }

    #
    # Parse out the quality data
    #
    if ( ($output_format eq "qual") || ($output_format eq "fastq") )
    {
	    if (! exists($row->{$qualField})) {print "\nQuality field $qualField not found in:\n\"$sqlString\"\n\n"; exit;}
    	$qual = $row->{$qualField}; 

        # if null info then skip it
        if (! $qual) { $badSequences++; next; }
    }

    # 
	# Create a sequence object and write it to $out_filename
    #
	my $seqObj;
	if ($output_format eq "fasta") 
    {
		# regular sequence data
		#$seqObj = Bio::Seq->new (-seq => $seq, -id=> $id, -desc=> $desc);
		$seqObj = Bio::Seq->new (-seq => $seq, -id=> $id);

		# reverse complement sequence if necessary
		if ($revcomp) { $seqObj = $seqObj->revcom; }
       
        # write out the data
		#print $out  ">$id\n$seq\n";
		$out->write_seq($seqObj);

	} elsif ($output_format eq "qual") {
		# quality data
		#$seqObj = Bio::Seq::PrimaryQual->new (-qual => $qual, -id=> $id, -desc=> $desc);

		# reverse complement if necessary
		#if ($revcomp) { $seqObj = $seqObj->revcom; }
		if ($revcomp) { warn "Does not support reverse complement for quality values yet. Sorry!\n"; exit;}

        # write out the data
		print OUT ">$id\n$qual\n";
		#$out->write_seq($seqObj);

    } elsif ($output_format eq "fastq") {
        # fastq data
        # insufficient info on bioperl site to create a fastq object, so just coding to OUT

        # convert the quality scores to character values
        #my @quals = split($qual->to_string());
        my @quals = split(" ", $qual);
        for (my $i = 0; $i<$#quals; $i++)
        {
            # code copied from (http://maq.sourceforge.net/fastq.shtml)
            # If the Phred quality is $Q, which is a non-negative integer, 
            # the corresponding quality character can be calculated with the following Perl code:
            # $q = chr(($Q<=93? $Q : 93) + 33);
            # where chr() is the Perl function to convert an integer to a character based on the ASCII table.
            # Conversely, given a character $q, the corresponding Phred quality can be calculated with:
            # $Q = ord($q) - 33;

            $quals[$i] = chr( ($quals[$i] <= 93 ? $quals[$i] : 93) + 33);
        }
            
        # print out the data
        print OUT "@" . "$id $desc\n";
        print OUT "$seq\n";
        print OUT "+" . "$id $desc\n";
        print OUT join("", @quals) . "\n";

    }

}

if ($badSequences) 
{
	print "$badSequences records did not have either an id or a sequence and were not written to $out_filename\n";
}
