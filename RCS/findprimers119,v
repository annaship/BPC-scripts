head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	2015.10.01.20.54.38;	author ashipunova;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#!/usr/bin/env perl

#########################################
#
# findprimers: finds primer locations in RefSSU
#
# Author: Susan Huse, shuse@@mbl.edu
#
# Date: Sun Oct 14 19:56:25 EDT 2007
#
# Copyright (C) 2008 Marine Biological Laboratory, Woods Hole, MA
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# For a copy of the GNU General Public License, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
# or visit http://www.gnu.org/copyleft/gpl.html
#
# Keywords: primer database 454 align refssu
# 
# Assumptions: 
#
# Revisions: work with "." Jul 27 2013
#            Usage statements to include all valid options Aug 14 2015
#	           Change table names (joins) to use with Silva119 (ASh) Sep 24 2015
#            Show accession_id with start and stop. (Ash) Oct 1 2015
#
# Programming Notes:
#
########################################
use strict;
use warnings;
use Bio::Seq;
use Bio::SeqIO;
use Conjbpcdb;

#######################################
#
# Set up usage statement
#
#######################################
my $scriptHelp = "
 findprimers - find the location of a primer sequence in the aligned RefSSU.
               Primer sequence must be inserted as read in 5'-3' direction
               (reverse complement the distal primers)
\n";

my $usage = "
   Usage:  findprimers -seq primerseq -domain domainname
      ex:  findprimers -seq \"CAACGCGAAGAACCTTACC\" -domain Bacteria
           findprimers -seq \"AGGTGCTGCATGGTTGTCG\" -domain Bacteria 

 Options:  
           -seq     sequence to search for
           -domain  superkingdom (e.g., Archaea, Bacteria, Eukarya)
           -ref     reference table (default: refssu)
           -align   align table (default: refssu_align)
\n";

#######################################
#
# Definition statements
#
#######################################
#Commandline parsing
#my $argNum = 3;
my $minargNum = 2;
my $maxargNum = 4;
my $verbose = 0;

#Runtime variables
#my $inFilename;
#my $outFilename;
my $dbName = "env454";
my $db_host = "newbpcdb2";
my $refTable = "refssu";
my $refID_field = "refssu_name_id";
my $refssu_name = "CONCAT_WS('_', accession_id, start, stop)";
my $alignTable = "refssu_align";
my $primerSeq;
my $domain;
my $version;

#######################################
#
# Test for commandline arguments
#
#######################################

if (! $ARGV[0] ) 
{
	print $scriptHelp;
	print $usage;
	exit -1;
} 

while ((scalar @@ARGV > 0) && ($ARGV[0] =~ /^-/))
{
	if ($ARGV[0] =~ /-h/) {
		print $scriptHelp;
		print $usage;
		exit 0;
	} elsif ($ARGV[0] eq "-seq") {
		shift @@ARGV;
		$primerSeq = shift @@ARGV;
	} elsif ($ARGV[0] eq "-domain") {
		shift @@ARGV;
		$domain = shift @@ARGV;
	} elsif ($ARGV[0] eq "-ref") {
		shift @@ARGV;
		$refTable = shift @@ARGV;
	} elsif ($ARGV[0] eq "-align") {
		shift @@ARGV;
		$alignTable = shift @@ARGV;
	} elsif ($ARGV[0] eq "-version") {
		shift @@ARGV;
		$version = shift @@ARGV;
	} elsif ($ARGV[0] =~ /^-/) { #unknown parameter, just get rid of it
		print "Unknown commandline flag \"$ARGV[0]\".";
		print $usage;
		exit -1;
	}
}


#######################################
#
# Parse commandline arguments, ARGV
#
#######################################

#if (scalar @@ARGV != $argNum) 
#if ((scalar @@ARGV < $minargNum) || (scalar @@ARGV > $maxargNum)) 
if ( (! $primerSeq) || (! $domain) )
{
	print "Incorrect number of arguments.\n";
	print "$usage\n";
	exit;
} 

# replace ambiguous . with _ for SQL syntax
# $primerSeq =~ s/\./_/g;
# We'll use regexp instead - AS, Jul 23 2013
# Should be like: G[CT][CT]TAAA..[AG][CT][CT][CT]GTAGC

#######################################
#
# SQL statements
#
#######################################

my $condb = Conjbpcdb::new($db_host, $dbName);
my $dbh = $condb->dbh();

#Select 5 sequences that have the primer in it
my $selectRefSeqs;
if ($domain eq "all")
{
$selectRefSeqs = "SELECT $refssu_name, r.sequence as unalignseq, a.sequence as alignseq 
  FROM $refTable as r
  JOIN refssu_119_taxonomy_source on(refssu_taxonomy_source_id = refssu_119_taxonomy_source_id) 
  JOIN taxonomy_119 on (taxonomy_id = original_taxonomy_id)
  JOIN $alignTable as a using($refID_field) 
    WHERE deleted=0 and r.sequence rlike '.*$primerSeq.*' 
    LIMIT 1000";
} else {
$selectRefSeqs = "SELECT $refssu_name, r.sequence as unalignseq, a.sequence as alignseq 
  FROM $refTable as r
  JOIN refssu_119_taxonomy_source on(refssu_taxonomy_source_id = refssu_119_taxonomy_source_id) 
  JOIN taxonomy_119 on (taxonomy_id = original_taxonomy_id)
  JOIN $alignTable as a using($refID_field) 
    WHERE taxonomy like \"$domain%\" and deleted=0 and r.sequence REGEXP '$primerSeq'
    LIMIT 1000";
}
 print "$selectRefSeqs\n"; 
#exit;
my $selectRefSeqs_h = $dbh->prepare($selectRefSeqs);

#get counts
my $get_counts_sql = "SELECT count(refssuid_id)
FROM $refTable AS r
  JOIN refssu_119_taxonomy_source ON(refssu_taxonomy_source_id = refssu_119_taxonomy_source_id) 
  JOIN taxonomy_119 ON (taxonomy_id = original_taxonomy_id)
    WHERE taxonomy like \"$domain%\" and deleted=0 and r.sequence REGEXP '$primerSeq'";
    
print "\$get_counts_sql = $get_counts_sql\n"; 

#######################################
#
# Find a valid sequence to search through, for each silva alignment version
#
#######################################
my $foundPrimer  = 0;
$selectRefSeqs_h->execute();
my $refStartPos  = 0;
my $match_length = 0;
while(my ($refssu_name, $refSeq, $alignSeq) = $selectRefSeqs_h->fetchrow())
{
	# Save out original aligned sequence for substring at the end
	my $initAlignSeq = $alignSeq;

	# Position of the beginning and the end of the primer in the unaliged (ref) sequence
	if ($refSeq =~ /$primerSeq/) {
        $refStartPos  = length($`); #$PREMATCH from regexp
        $match_length = length($&);
    }
    
    # my $refStartPos = index($refSeq, $primerSeq);
    # my $refEndPos = $refStartPos + length($primerSeq) - 1;
    my $refEndPos = $refStartPos + $match_length - 1;
	# Initialize index positions of the aligned sequence
	my $alignStartPos;
	my $alignEndPos;

	# Full length of both aligned and unaligned sequences
	my $alignPos = length($alignSeq);
	my $refPos = length($refSeq);

	# Step along the aligned sequence starting at the end, 
	# chop off gaps, and walk through the actual bases, ticking them off in the unaligned sequence.
	while ($alignSeq)
	{
		# remove trailing gap characters
		# and grab the last real base
		$alignSeq =~ s/-*$//;
		my $base = chop $alignSeq;

		# decrement the position along the reference sequence (step back one base)
		$refPos--;

		# if you are now at the end of the primer, store as $alignEndPos
		if ($refPos == $refEndPos) {$alignEndPos = length($alignSeq) + 1;}

		# ifyou are now at the beginning of the primer, print out the information
		if ($refPos == $refStartPos) 
		{
			$alignStartPos = length($alignSeq) + 1;
			print "Primer: " . substr($initAlignSeq, $alignStartPos - 1, $alignEndPos - $alignStartPos + 1) . "\n";
			print "start=$alignStartPos, end=$alignEndPos ($refssu_name)\n";
			$foundPrimer = 1;
			last;
		}
	}
	if ($foundPrimer) {last;}
}
if (! $foundPrimer) {print "Unable to locate primer in aligned sequences\n";}

# Clean up database connections
$selectRefSeqs_h->finish;
$dbh->disconnect;
@
