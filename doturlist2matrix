#!/usr/bin/env perl

#########################################
#
# mothurlist2matrix: creates a matrix by dataset, project or other field
#
# Author: Susan Huse, shuse@mbl.edu
#
# Date: Thu Sep 25 12:12:03 EDT 2008
#
# Copyright (C) 2008 Marine Biological Laborotory, Woods Hole, MA
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# For a copy of the GNU General Public License, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
# or visit http://www.gnu.org/copyleft/gpl.html
#
# Keywords: mothur dotur list cluster matrix otu
# 
# Assumptions: 
#
# Revisions:
#
# Programming Notes:
#
########################################
use strict;
use warnings;
use Conjbpcdb;

#######################################
#
# Set up usage statement
#
#######################################
my $scriptHelp = "
  mothurlist2matrix - takes a mothur .list file and creates a matrix of frequencies
                     of reads for each value of a specified field for each OTU cluster

                    Assumes that the ids in the list file are read IDs from trimseq.
                    and that the field is a valid field in trimseq.
\n";

my $usage = "
   Usage:  mothurlist2matrix -l myfile.fn.list -w clusterwidth -f database_field > out.txt
      ex:  mothurlist2matrix -l eukv9.fa.m2.fn.list -w 0.03 -f project > out.txt

 Options:  
           -l       name of mothur output list file
           -w       clustering width (distance) to export (unique, 0.03, 0.06, 0.10)
           -f       field to use for matrix (e.g., dataset, project, prox_primer)
                    Currently restricted to fields in table trimseq
                    To select multiple fields, enter in order separated by commas, no spaces
                    for instance project,dataset will provide both in the header.
                    Default: dataset
                    

 Example Output: 
           Cluster ID    Prj1;D1    Prj1;D2    Prj1;D3    Total
                    1      368         98          428        894
                    2      41          10          118        169
                    3      29          0           112        141
                    4      47          10          163        220
                    5      0           0            37         37
                    6      3           1            98        102

\n";

#######################################
#
# Definition statements
#
#######################################
#Commandline parsing
my $verbose = 0;

#Runtime variables
my $listFilename;
my $width;
my $field = "dataset";
my $dbName = "env454";
my $db_host = "newbpcdb2";
##my $readsTable = "trimseq as i";  #### if you are being fancy and using join reads table, be sure 
#my $readsTable = "trimseq_view as i";  #### if you are being fancy and using join reads table, be sure 
#                                     ## to set the table with the read id to "i";
my $readsTable = "trimseq as t join project as p using(project_id) join dataset as d using(dataset_id) ";  #### if you are being fancy and using join reads table, be sure 
my $idField = "read_id";
my $delim = ";"; # if user selects multiple fields for column header, this is the delimiter

#######################################
#
# Test for commandline arguments
#
#######################################

if (! $ARGV[0] ) 
{
	print $scriptHelp;
	print $usage;
	exit -1;
} 

while ((scalar @ARGV > 0) && ($ARGV[0] =~ /^-/))
{
	if ($ARGV[0] =~ /-h/) {
		print $scriptHelp;
		print $usage;
		exit 0;
	} elsif ($ARGV[0] eq "-l") {
		shift @ARGV;
		$listFilename = shift @ARGV;
	} elsif ($ARGV[0] eq "-w") {
		shift @ARGV;
		$width = shift @ARGV;
	} elsif ($ARGV[0] eq "-f") {
		shift @ARGV;
		$field = shift @ARGV;
	} elsif ($ARGV[0] eq "-db") {
		shift @ARGV;
		$dbName = shift @ARGV;
	} elsif ($ARGV[0] eq "-host") {
		shift @ARGV;
		$db_host = shift @ARGV;
	} elsif ($ARGV[0] eq "-rt") {
		shift @ARGV;
		$readsTable = shift @ARGV;
	} elsif ($ARGV[0] eq "-id") {
		shift @ARGV;
		$idField = shift @ARGV;
	} elsif ($ARGV[0] eq "-v") {
		$verbose = 1;
		shift @ARGV;
	} elsif ($ARGV[0] =~ /^-/) { #unknown parameter, just get rid of it
		print "Unknown commandline flag \"$ARGV[0]\".\n";
		print $usage;
		exit -1;
	}
}


#######################################
#
# Parse commandline arguments, ARGV
#
#######################################

if ( (! $listFilename) || (! $width) )
{
	print "Incorrect number of arguments.\n";
	print "$usage\n";
	exit;
} 

#######################################
#
# Open the files
#
#######################################

open (IN, "<$listFilename") || die ("Unable to read input file: $listFilename.  Exiting.\n");

#######################################
#
# Connect to the database
#
#######################################

my $condb = Conjbpcdb::new($db_host, $dbName);
my $dbh = $condb->dbh();

#Select
my $where = " WHERE ";
if ($readsTable =~ / where /i) {$where = " AND ";}
if ($field =~ /,/) 
{
    # have selected to concatenate multiple fields
    $field = "concat_ws('" . $delim . "', $field ) as mtxfield";
}
my $selectQuery = "SELECT $field FROM $readsTable $where $idField = ?";
my $selectQuery_h = $dbh->prepare($selectQuery) or die "Unable to prepare statement: $selectQuery. Error: " . $dbh->errstr . "\n";

#if ($selectQuery_h->row > 0) {#has data}

#######################################
#
# Read in the list file
#
#######################################
my %clusterHash;
my %count_of;
my %total_of;

my $last_line;
my $found_width = 0;
while (my $line = <IN>)
{
    chomp $line;
    my $line_width = $line;
    $line_width =~ s/\s+.*$//;  # get just the first set of characters

    #
	# Only parse the line that has clusters of the specified width
    # Unfortunately if the width is not there, you have to use the one before (thanks Pat!)
    #
	if ($line_width ne $width) 
    {
        # check to see if you already missed the target width
        # if $width = "unique" then it will always find it, so don't worry about that one
        if ($line_width eq 'unique') { $last_line = $line; next;} 

        if ($width < $line_width)
        {
            # oops you missed, use the last line
            $line = $last_line; 

        } else {
            # save the last line in case the line you are looking for is not there and you have to go back one.
            $last_line = $line;
            next;
        }
    }

	#
	# Clusters are separated by tabs, first field is cluster width, second is number of clusters
	#
	my @data = split(/\t/, $line);
	#print join(", ", $data[0], $data[1], $#data) . "\n"; 
	shift @data; # peel off otu width
	shift @data; # peel off number of otus

	#
	# First load all the data for the clusters, need to load first, because we 
	# don't know the full list of datasets (output columns) until we have looked 
	# up every read_id
	#

	my $clusterID = 1;
	foreach my $cluster (@data)
	{

		# each field is made of comma-separated read ids
		foreach my $id (split(/,/, $cluster))
		{

			# lookup the read and get its project and dataset
			$selectQuery_h->execute($id) or die "Unable to execute SQL statement: $selectQuery.  Error: " . $selectQuery_h->errstr . "\n";
            if ($selectQuery_h->rows == 0) 
            {
                print "Read $id was not found in the database using $selectQuery \nExiting...\n";
                exit -1;
            }
			while(my ($field_value) = $selectQuery_h->fetchrow()) 
			{
				# load a hash for each project/dataset combo, with the number of reads
				$clusterHash{$field_value}{$clusterID}++;
                $count_of{$clusterID}{$field_value}++;
                $total_of{$clusterID}++;
				#print join(", ", $clusterID, $id, $project, $dataset) . "\n";
			}
		}
		$clusterID++;
	}

	#
	# Now that all the data are in the hash, 
	# Step through each cluster, and through each field_value (dataset) and 
	# export the matrix
	#

	# Print out the header information
	print join("\t", "Cluster ID", "Total", "Count", sort keys %clusterHash) . "\n";

	#
	for (my $i = 1; $i < $clusterID; $i++)
	{
		my $total = 0;
        my $count = 0;
        print join("\t", $i, $total_of{$i}) ;
        print "\t" . scalar keys %{$count_of{$i}};
		foreach my $f (sort keys %clusterHash)
		{
            my $field_value;
			if (! exists $clusterHash{$f}{$i}) 
            {
                $field_value = 0;
            } else { 
                $field_value = $clusterHash{$f}{$i};
            }

			print "\t" . $field_value;
		}
        print "\n";
	}
    
    last;
}


#######################################
#
# Close the files
#
#######################################
close(IN);
$dbh->disconnect;
